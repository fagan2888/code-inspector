<?

	/*************************************************************************/
	//
	//	File:				interface.php
	//	Date:				November 14, 2002
	//	Author:				Reflexions Design (Alex Smith)
	//	Description:		Definition file for Interface class
	//
	/*************************************************************************/


	require_once("./admin.ini.php");

	require_once("./admin_item.php");

	require_once("$PHP_INCLUDE_PATH/system/system.php");


class Interface extends System
{
	var $name;						// the interface name
	var $items;						// associative array of ("item_type" => "item_description")
	var $current_item;				// The current Admin_item object
	
	
	// Function:	Interface
	// Inputs:		Interface Name (from admin.ini.php)
	// Returns:		class instance
	// Purpose:		Constructor.  Create the interface, based on the item types in items[].
	//				Item types are stored in admin.ini.php: interfaces = array ("Int1"	=> array( "item_type1", "item_type2", ...),
	//																			"Int2"	=> array( "item_typex", "item_typey", ...), ...);
	//				Tab files are stored in: interface_tabs = array( "Int1"	=>	"filename",
	//																 "Int2"	=>	"filename2", ...);
	
	function Interface($name)
	{
		global $debug_bot;
		global $interfaces;
		global $FILE_DIRECTORY;
		global $URL_PATH;
		global $HTDOCS;	
		global $MAIN_URL_PATH;

		// user-related variables
		global $ADMIN_USER_AUTHENTICATION;
		global $user;			// current user instance (if ADMIN_USER_AUTHENTICATION is set)

		// holds error messages returned by callback function
		$error_array = array();

		// Name the interface
		$this->name = $name;
		
		// return value from write_item();
		$write_error_array = array();
	
		// Load the item_types from the ini file:
		reset($interfaces);
		
		if($interfaces[$name]["include"])
			include($interfaces[$name]["include"]);
		else
		{

			while(list($item_name, $item_desc) = each($interfaces[$name]))
			{
				$this->items[$item_name] = $item_desc;
			}


			$debug_bot->message("ITEM_TYPES", "Item type in \$_POST, top of Interface():". $_POST["item_type"] );
			$debug_bot->message("ITEM_TYPES", "Item type in \$_GET, top of Interface():". $_GET["item_type"] );
			// If an item_type is selected, display that item.  Otherwise, just show the first in items[].
			if(!$_POST["item_type"] && !$_GET["item_type"])
			{
				reset($this->items);
				list($item_type, $item_description) = each($this->items);
				$debug_bot->message("ITEM_TYPES", "No _POST or _GET item_type, defaulting to $item_type, instead");
				// Create the Admin_item instance
				$this->current_item = new Admin_item($item_type, $item_description);
				$debug_bot->message("ITEM_TYPES", "Item type passed to Admin_item():". $item_type);
			}
			elseif($_POST["item_type"])
			{
				$item_description = $this->items[$_POST["item_type"]];		// interface has been created through a form post

				// Create the Admin_item instance
				$this->current_item = new Admin_item($_POST["item_type"], $item_description);
				$debug_bot->message("ITEM_TYPES", "Item type passed to Admin_item():". $_POST["item_type"]);
			}
			else
			{
				$item_description = $this->items[$_GET["item_type"]];		// interface has been created through a link

				// Create the Admin_item instance
				$this->current_item = new Admin_item($_GET["item_type"], $item_description);
				$debug_bot->message("ITEM_TYPES", "Item type passed to Admin_item():". $_GET["item_type"]);
			}






			// Write/Modify
			if($_POST["item_submit"])
			{
					// write item returns an array with two elements:
				// return_array[0]: the ID number of the record just written
				// return_array[1]: the array of errors (if any) encountered during the write process
				
				// if there's a write_callback_function(), call it
				if($this->current_item->data["special"]["write_callback_function"])
				{
					$write_callback = $this->current_item->data["special"]["write_callback_function"];

					// now save the errors generated by the callback function, if any
					$write_callback_error_array = $write_callback();
				}
				
				// save the errors generated by write_item(), if any
				list($item_id_new,$write_item_error_array) = $this->current_item->write_item();

				// now merge both write error arrays together
				$write_error_array = array_merge($write_callback_error_array,$write_item_error_array);
								
				if (sizeof($write_error_array) || ($_POST["item_submit"] == "Save and Continue Editing"))
				{
					if($_POST["item_record"]["id"])
					{
						$_GET["item"] = $_POST["item_record"]["id"];
					}
					else
					{
						$_GET["item"] = $item_id_new;	
					}
				}
			}
			elseif($_POST["modify_item"])
				$this->current_item->modify_item();
			elseif($_POST["delete_item"])
				$error_array = $this->current_item->delete_item();
			elseif($_POST[$this->current_item->data["special"]["custom_button_name"]] && $this->current_item->data["special"]["custom_callback"])
				$this->current_item->data["special"]["custom_callback"]();

			// Display the nav
			$this->nav();
			// Display the rest, whatever it may be:
			if($_POST["list_records"] || $_GET["list_records"])									// Modify the listing with an 'ORDER BY'
				$this->current_item->list_items($error_array);
			elseif($_POST["create_record"])
				$this->current_item->view_item(0);
			elseif($_GET["item"] || $_GET["js"] || sizeof($write_error_array))										// $_GET["js"] tells us the form was just submitted by a script (which added js=1 to the url)
				$this->current_item->view_item($_GET["item"],$write_error_array);
			else
				$this->current_item->list_items($error_array);


			$debug_bot->message("ITEM_TYPES", "Current interface: ". $this->name);
		}	
	}
	
	// end of function Interface()
	
	
	
	
	
	
	
	
	
	// function:	nav()
	// inputs:		none
	// returns:		nothing
	// purpose:		Displays the navigation form elements for this interface
	
	function nav()
	{
		global $debug_bot;
		global $per_page;
		
		// for user-based authentication
		global $ADMIN_USER_AUTHENTICATION;
		global $user;
		
		// used to check if current user is allowed to see $this->current_item in the menu
		$valid_flag = 0;
		
		
		$debug_bot->message("ITEM_TYPES", "Name of Admin_item in nav(): ". $this->current_item->name);

		echo "<br>\n";
		echo "<form name=\"nav\" action=\"". $_SERVER["PHP_SELF"] ."\" method=post>\n";


		echo "<select name=\"item_type\" onChange=\"javascript:document.nav.submit();\">\n";
		
		reset($this->items);
		while(list($key, $val) = each($this->items))
		{
			// reset the valid flag
			$valid_flag = 0;
			
			if ($ADMIN_USER_AUTHENTICATION && isset($user->type))
			{
				// check to see if this user's type is permitted to see the item in question
				$temp_item = new Admin_item($key,$val);
				if (sizeof($temp_item->data))
					$valid_flag = 1;			
			}


			if ($val != "HIDDEN" && (!$ADMIN_USER_AUTHENTICATION || $valid_flag))
			{
    			echo "<option value=\"$key\" ";
    			if($this->current_item->name == $key)
        			echo "selected";
				echo ">$val\n";
			} 
			
			
			
			
		}

		echo "</select>\n";

		echo "<input type=hidden name=\"interface\" value=\"". $this->name ."\">\n";
		if($per_page)
			echo "<input type=hidden name=\"per_page\" value=\"$per_page\">";

		$this->current_item->list_button();
		$this->current_item->create_button();


		echo "</form>\n";

	}

	// end of function nav
}


?>
